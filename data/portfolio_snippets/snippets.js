const snippets = [];

const sensoryPlayDays = `""" I created a web app called Sensory Play Days on Ezer Farm, the website is EzerFarmTN.com. They host "Sensory Play Days" on the farm for homeschooling moms to nurture developmental growth for their children. It has a sign up form that dynamically loads the list of available play days from the database and allows the user to select which play day to schedule for and input information about the kids in attendance. Once the user reserves their play day, they receive an email through nodemailer with that information and a link to manage their reservation. The management dashboard allows the user to view relevant details or cancel the reservation. If they cancel, they will again receive a confirmation email as well as the site admins. I created an admin dashboard that is password protected and allows the owner/admin to view the scheduled play days by day, the ability to cancel reservations and the ability to add new available days or delete others. This was a fun project for me and I wanted to make sure the app felt fluid and easy to use. I opted for vanilla Javascript instead of React because I did not think the performance overhead was necessary for this project. On the backend I used NodeJS with Express, dotenv, MongoDB and I opted for express-basic-auth for a lightweight authentication solution. The backend is split up into controllers/, utils/, models/, and routes/ directories and utilizes ES Modules and async/await syntax. I did not use a template engine for the view on this project, instead I have individual HTML files for each page that share a common index.css link and sensory.js for the hamburger menu and animations that are consistant throughout the app. sensory.js creates an IntersectionObserver for each div with class "section" that starts with class "hidden" but gets displayed when 50% of the div is intersecting with the viewport. Each page also loads other CSS links and JS scripts that are for each specific page. I utilized CSS variables and consistent styling to make the UI feel seamless and user-friendly. The app is fully responsive and is optimized for mobile, tablet and desktop. The site is managed by PM2 and is currently hosted on a Digital Ocean Ubuntu droplet using NGINX. The droplet's IP is whitelisted for the MongoDB Atlas database. A live demo of this project will be available until the summer of 2024 at EzerFarmTN.com and you can access the demo admin dashboard at https://EzerFarmTN.com/sensory/admin with username: example-user password: example-password. You can view the GitHub code here- https://github.com/sebdoubleu/ezerfarmtn.com
(Tools & Technologies Used): Vanilla JavaScript, MongoDB, Node.js, NodeMailer, Express, Express Basic Auth, HTML, CSS
(Related Links): https://www.ezerfarmtn.com, https://github.com/sebdoubleu/ezerfarmtn.com """`;
snippets.push(sensoryPlayDays);

const newsScraper = `""" AI News Buddy - I created an AI News Scraper app that uses Cheerio in NodeJS to scrape the homepage of techcrunch.com and get a list of articles, titles, and their links. Because the application is making multiple parallel calls to the OpenAI API, I've implemented an exponential backoff algorithm to handle fault tolerance. This then gets sent from the controller to a utility function that summarizes the article text with GPT-3.5 and also gives a list of categories in a format that gets parsed and separated from the returned text. The document then gets uploaded to the MongoDB database that I've connected through MongoClient.connect() and saves the article title, AI summary, link and the related categories. The server can also be called through a Telegram bot that I created which returns a list of today's articles and their summaries. On the frontend, I built a React app with Vite. The application is split into multiple components and utilizes custom hooks and the React Context API. I used CSS variables for styling the app. The CSS includes animations and media queries for responsive design. I made the UI very modern in a dark mode style, using various shades of darker greys and light shadows to give it a feeling of depth. The user experience is quick and easy to use and allows the user to carry on a conversation thread with the AI News Bot that answers questions based on the news article. The app saves chat history and article favorites that the user can re-visit later and continue conversations. The scraper bot is scheduled multiple times a day to get the newest articles from techcrunch.com but does not process duplicates. The app also produces a "Daily TLDR" to give a short AI summary of the day's news. A live demo version of this project is available at https://WebXpert.io
(Tools & Technologies Used): React, MongoDB, Node.js, Express, Node Cron, React Markdown, GPT-4/GPT-3.5 Integration, Cheerio, JavaScript, HTML, CSS
(Related Links): https://github.com/sebdoubleu/ai-news-scraper, https://WebXpert.io """`;
snippets.push(newsScraper);

const landingPages = `""" Landing pages - During my time doing contract Web Development for The Relocation Professional, I built landing pages that capture lead information for moving companies and streamline their sales processes with CRM integrations. I coded them in JavaScript, HTML, CSS, and Node.js/Express for the backend hosted on a Linux DigitalOcean Server with Nginx. For example, I created a lead capture page for a company called Brothers Moving and Storage out of Texas. A demo version of the landing page can be viewed at https://sebthedeveloper.com/demos/brothers-moving-and-storage and the GitHub link is https://github.com/sebdoubleu/brothers-moving-and-storage-landing-page/. The customer requested a playful and easy to use quote request page with a bit of creativity. It is fully responsive and easy to use. On desktop, I was able to make good use of the available space to add a branded moving box image that moves around on the left half of the screen when the user moves the mouse to create a playful UI/UX. The form gets submitted to an API for a CRM software called Granot that then collects the lead data for the company and posts it to their live sales board. I did a very similar landing page for a company called Off Load Moving Co. out of Virginia. It is a very fast and easy to use landing page with a modern design and has a success page to let the user know their quote request was successful. A demo version of that landing page can be viewed at https://sebthedeveloper.com/demos/off-load-moving and the GitHub is https://github.com/sebdoubleu/off-load-moving-landing-page. I also did one for a company called Cross Country Movers out of Philadelphia that integrates with a CRM software called Smart Moving. A demo version of that landing page can be viewed at https://sebthedeveloper.com/demos/cross-country-movers and the GitHub is https://github.com/sebdoubleu/cross-country-movers-landing-page. Also, during my time working as Wordpress Developer for Dougherty Brothers Moving, I have created a few landing pages that were also used for our PPC campaigns that I set up. 
(Tools & Technologies Used): JavaScript, HTML, CSS, Handlebars, NodeMailer, Node.js, Express
(Related Links): https://sebthedeveloper.com/demos/off-load-moving, https://github.com/sebdoubleu/off-load-moving-landing-page, https://sebthedeveloper.com/demos/brothers-moving-and-storage, https://github.com/sebdoubleu/brothers-moving-and-storage-landing-page/, https://sebthedeveloper.com/demos/cross-country-movers, https://github.com/sebdoubleu/cross-country-movers-landing-page """`;
snippets.push(landingPages);

const palmBeachCustomGrillz = `""" E-Commerce Web App with React and TypeScript - 
Contracted to develop a custom coded E-Commerce Website for Palm Beach Custom Grillz LLC. Built with TypeScript, React, Vite, Bootstrap, Express, Node.js, CSS and includes a Stripe API integration for online payments. It uses React Router Dom for client side routing. It has a clean dark-themed user interface and an easy to understand user experience. The project utilizes the React Context API and local storage.
Here are some of the key features:
1. Browse available products and add items to cart.
2. Select add-ons for individual items and view pricing options.
3. Require acceptance of Terms and Conditions prior to checkout.
4. Integrate with Stripe API to accept payments and collect shipping information.
5. Utilize local storage to track selected items and persist cart state on reload and client-side navigation.
This project is live at https://palmbeachcustomgrillz.com and the GitHub link is https://github.com/sebdoubleu/ecommerce-grills-shop
(Tools & Technologies Used): TypeScript, React, Vite, Stripe Integration, Bootstrap, Express, Node.js, CSS
(Related Links): https://palmbeachcustomgrillz.com, https://github.com/sebdoubleu/ecommerce-grills-shop """`;
snippets.push(palmBeachCustomGrillz);

const emailTemplateMailer = `""" HTML Email Template Mailer -
Internal custom HTML email tool that I created during my time at Dougherty Brothers Moving. The company was having issues with the sales emails being sent to customer's spam mail when sent through the Granot CRM email servers (which is the typical standard for the industry). I was tasked with creating this tool that would ensure email deliverability and in the process developed many custom HTML email templates that are fully responsive and work on all email clients including Outlook (tested with Email on Acid). The tool can also track email open rates with tracking pixels. You can view a project demo by using the demo account information username: example-user password: example-password at the demo URL https://GoodNoodle.xyz and the GitHub link is https://github.com/sebdoubleu/email-templating-demo
1. Choose from custom company-branded HTML email templates and dynamically insert customer info.
2. Preview generated emails before sending.
3. Send multiple emails in bulk with dynamic customer information.
4. Dynamically include sales representative's contact information in sent emails.
5. Generate formatted list of customer names and emails from Granot CRM's "Estimates in Process" page. This script is written and implemented specifically for that page.
6. Insert tracking pixel to know when an email is viewed (IP address may not be accurate if customer is using Gmail, as Gmail utilizes proxy servers to mask this information).
(Tools & Technologies Used): JavaScript, Node.js, Express, Handlebars, Passport, BCrypt, Express Session, Express Flash, Nodemailer, HTML, CSS
(Related Links): https://GoodNoodle.xyz, https://github.com/sebdoubleu/email-templating-demo """`;
snippets.push(emailTemplateMailer);

const wordpress = `""" WordPress -

(Tools & Technologies Used): JavaScript, Node.js, Express, Handlebars, Passport, BCrypt, Express Session, Express Flash, Nodemailer, HTML, CSS
(Related Links): https://GoodNoodle.xyz, https://github.com/sebdoubleu/email-templating-demo """`;
snippets.push(wordpress);

module.exports = snippets;
